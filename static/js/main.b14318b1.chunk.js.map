{"version":3,"sources":["components/Info/FeatureList.js","components/Info/InfoText.js","components/Common/HeaderSteps.js","components/Info/Info.js","components/Exam/Timer.js","components/Exam/ExamHeader.js","components/BubbleRow/Bubble.js","components/BubbleRow/BubbleRow.js","components/Exam/ExamContent.js","components/Exam/Exam.js","components/Setup/SetupForm.js","components/Setup/Setup.js","components/Disclaimer/DisclaimerText.js","components/Disclaimer/Disclaimer.js","App.js","serviceWorker.js","index.js"],"names":["Paragraph","Typography","Text","Added","title","color","twoToneColor","Development","NotAFeature","FeatureList","strong","style","fontSize","InfoText","orientation","href","Header","Layout","Step","Steps","HeaderSteps","current","backgroundColor","marginTop","description","Title","InfoTitle","Ribbon","text","position","marginRight","marginBottom","placement","AlphaAlert","message","level","type","closable","showIcon","textAlign","Info","Content","icon","subTitle","extra","key","Timer","goToNextSection$","timerStopped$","currentSection","defaultTime","useSessionStorageState","time","setTime","timerActive","setTimerActive","timeStarted","useRef","Date","now","cachedSection","useEffect","undefined","moment","duration","asMilliseconds","handleStop","timerRef","handleStart","emit","start","success","pause","error","content","onClick","disabled","className","date","Number","autoStart","ref","renderer","total","completed","formatted","sessionStorage","setItem","hours","minutes","seconds","zeroPadTime","ExamHeader","zIndex","width","gutter","span","offset","Bubble","letter","isSelected","number","name","value","id","BubbleRow","enableButton$","totalQuestions","answerData","setAnswerData","marked","setMarked","useSubscription","val","Object","keys","length","e","choice","String","console","log","onChange","target","handleOnChange","rotate","verticalAlign","map","ExamContent","useEventEmitter","useState","disableButton","setDisableButton","modalVisible","setModalVisible","myArr","i","push","ModalInfo","ellipsis","rows","expandable","symbol","padding","num","visible","onCancel","onOk","cancelText","okText","entries","JSON","parse","getItem","filter","block","Exam","sections","setCurrentSection","numberQuestions","setNumberQuestions","sectionTime","setSectionTime","section","v","values","height","SetupForm","numSections","setNumSections","setSections","timeError","setTimeError","questionError","setQuestionError","history","useHistory","onQuestionChange","questions","validateStatus","errorMsg","validateQuestions","onTimeChange","validateTime","onFinish","clear","replace","autoComplete","List","fields","add","remove","field","align","Item","fieldKey","rules","required","help","addonBefore","addonAfter","htmlType","marginLeft","Setup","settingIcon","spin","indicator","FirstParagraph","SecondParagraph","ThirdParagraph","FourthParagraph","DisclaimerText","Disclaimer","status","App","basename","process","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"yVAIOA,EAAmBC,IAAnBD,UAAWE,EAAQD,IAARC,KAEZC,EAAQ,kBAAM,kBAAC,IAAD,CAASC,MAAO,SAAUC,MAAO,WAAW,kBAAC,qBAAD,CAAoBC,aAAc,cAC5FC,EAAc,kBAAM,kBAAC,IAAD,CAASH,MAAO,kBAAmBC,MAAO,WAAW,kBAAC,qBAAD,CAAoBC,aAAc,cAC3GE,EAAc,kBAAM,kBAAC,IAAD,CAASJ,MAAO,sBAAuBC,MAAO,WAAW,kBAAC,qBAAD,CAAoBC,aAAc,cAmCtGG,EAhCK,WAChB,OACI,kBAACT,EAAD,KACI,kBAACE,EAAD,CAAMQ,QAAM,EACNC,MAAO,CAACC,SAAU,KADxB,qCAKA,6BACA,kBAAC,EAAD,MAPJ,8BAOuC,6BACnC,kBAAC,EAAD,MARJ,UAQmB,6BACf,kBAAC,EAAD,MATJ,mCAS4C,6BACxC,kBAAC,EAAD,MAVJ,yBAUkC,6BAC9B,kBAAC,EAAD,MAXJ,qCAW8C,6BAC1C,kBAAC,EAAD,MAZJ,0BAYyC,6BACrC,kBAAC,EAAD,MAbJ,2BAa0C,sCAb1C,KAa6D,sCAb7D,QAamF,uCAbnF,SAa2G,6BACvG,kBAAC,EAAD,MAdJ,sBAcqC,6BACjC,kBAAC,IAAD,MACA,kBAACV,EAAD,CAAMQ,QAAM,EACNC,MAAO,CAACC,SAAU,KADxB,wCAKA,6BACA,kBAAC,EAAD,MAtBJ,oCAsBmD,6BAC/C,kBAAC,EAAD,MAvBJ,iBAuBgC,6BAC5B,kBAAC,EAAD,MAxBJ,yCAwBwD,6BACpD,kBAAC,EAAD,MAzBJ,yCAyBwD,+BClCzDZ,EAAmBC,IAAnBD,UAAWE,EAAQD,IAARC,KAiDHW,EA/CE,WACb,OACI,oCACA,kBAAC,IAAD,CAASC,YAAa,QAAtB,2BACA,kBAAC,EAAD,KACI,kBAAC,EAAD,oSAKI,kBAAC,IAAD,CAASV,MAAO,qCACZ,+DANR,iLAWJ,kBAAC,IAAD,CAASU,YAAa,QAAtB,gCACA,kBAAC,EAAD,KACI,kBAAC,EAAD,sDAEI,kBAAC,IAAD,CAASV,MAAO,sBAAhB,SAFJ,6NAI0E,0CAJ1E,gIASJ,kBAAC,IAAD,CAASU,YAAa,QAAtB,oCACA,kBAAC,EAAD,KACI,kBAAC,EAAD,+SAKA,6BACA,6BACA,kBAAC,EAAD,MACA,kBAAC,IAAD,MACA,kBAAC,EAAD,wEAEI,uBAAGC,KAAM,6CAAT,WAFJ,4B,oBCzCLC,EAAUC,IAAVD,OACAE,EAAQC,IAARD,KAeQE,EAbK,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACI,kBAACL,EAAD,CAAQL,MAAO,CAACW,gBAAiB,UAC7B,kBAAC,IAAD,CAAOD,QAASA,EAASV,MAAO,CAACY,UAAW,QACxC,kBAACL,EAAD,CAAMd,MAAO,cAAeoB,YAAa,eACzC,kBAACN,EAAD,CAAMd,MAAO,aAAcoB,YAAa,mBACxC,kBAACN,EAAD,CAAMd,MAAO,QAASoB,YAAa,yBACnC,kBAACN,EAAD,CAAMd,MAAO,OAAQoB,YAAa,4BCN3CC,EAASxB,IAATwB,MAEDC,EAAY,WACd,OACI,kBAAC,IAAMC,OAAP,CAAcC,KAAM,QAASjB,MAAO,CAACkB,SAAU,WAAYC,YAAa,OAAQC,aAAc,QAASC,UAAW,MAAO3B,MAAO,OAAhI,mBAMF4B,EAAa,WACf,OACI,oCACI,6BACA,kBAAC,IAAD,CAAOC,QAAS,kBAACT,EAAD,CAAOU,MAAO,GAAd,iBACTX,YAAa,0GACbY,KAAM,QACNC,UAAQ,EACRC,UAAQ,EACR3B,MAAO,CAAC4B,UAAW,YAgCvBC,EAzBF,WAET,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAanB,QAAS,IACtB,kBAAC,IAAOoB,QAAR,CAAgB9B,MAAO,CAACW,gBAAiB,UACzC,kBAAC,IAAD,CACIoB,KAAM,kBAAC,eAAD,MACNtC,MAAO,kBAAC,EAAD,MACPuC,SAAS,4DACTC,MAAO,CACH,kBAAC,IAAD,CAAQR,KAAM,UAAWrB,KAAM,cAAe8B,IAAK,GAAnD,eACA,wBAAIA,IAAK,IACT,kBAAC,EAAD,CAAYA,IAAK,MAGrB,6BACI,kBAAC,EAAD,W,kFCyBLC,EArED,SAAC,GAAmE,EAAlEC,iBAAmE,IAAjDC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,YAAiB,EACtDC,YAAuB,YAAa,GADkB,mBACvEC,EADuE,KACjEC,EADiE,OAExCF,YAAuB,eAAe,GAFE,mBAEvEG,EAFuE,KAE1DC,EAF0D,KAGxEC,EAAcC,iBAAOC,KAAKC,OAC1BC,EAAgBH,iBAAOR,GAG7BY,qBAAU,YACQ,IAAVT,QAA+BU,IAAhBZ,GAA2BG,EAAQU,IAAOC,SAASd,EAAa,WAAWe,kBAC1FhB,IAAmBW,EAAcvC,UACjCgC,EAAQU,IAAOC,SAASd,EAAa,WAAWe,kBAChDT,EAAYnC,QAAUqC,KAAKC,MAC3BC,EAAcvC,QAAU4B,EACxBiB,OAEL,CAAChB,IAEJ,IAAMiB,EAAWV,mBAEXW,EAAc,WAChBb,GAAe,GACfP,EAAcqB,KAAK,WACnBF,EAAS9C,QAAQiD,QACjBpC,IAAQqC,QAAQ,kCAEdL,EAAa,WACfX,GAAe,GACfP,EAAcqB,KAAK,WACnBF,EAAS9C,QAAQmD,QACjBtC,IAAQuC,MAAM,+CAoBlB,OACI,kBAAC,IAAD,CACIC,QAZU,WACd,OACI,6BACI,kBAAC,IAAD,CAAQtC,KAAM,SAAUuC,QAAST,EAAYvD,MAAO,CAACmB,YAAa,OAC1D8C,UAAWtB,GADnB,QAEA,kBAAC,IAAD,CAAQlB,KAAM,UAAWuC,QAASP,EAAaQ,SAAUtB,GAAzD,WAQJtB,UAAW,cACX5B,MAAO,cAEP,yBAAKyE,UAAW,cACZ,kBAAC,IAAD,CACIC,KAAMC,OAAOvB,EAAYnC,QAAU+B,GACnC4B,UAAW1B,EACX2B,IAAKd,EACLe,SA3BC,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UAEjC,OADAC,eAAeC,QAAQ,WAAYJ,GAC/BC,EAAkB,wBAAIP,UAAW,cAAf,QACV,8BAAOQ,EAAUG,MAAjB,IAAyBH,EAAUI,QAAnC,IAA6CJ,EAAUK,QAAvD,UAyBAC,YAAa,OC/D1B3E,EAAUC,IAAVD,OAuBQ4E,EArBI,SAAC,GAA6D,IAA5D5C,EAA2D,EAA3DA,cAAeD,EAA4C,EAA5CA,iBAAkBE,EAA0B,EAA1BA,eAAgBG,EAAU,EAAVA,KAClE,OACI,kBAAC,EAAD,CAAQzC,MAAO,CAACkB,SAAU,QAASgE,OAAQ,EAAGC,MAAO,SACjD,kBAAC,IAAD,CAAKC,OAAQ,IACT,kBAAC,IAAD,CAAKC,KAAM,GACP,wBAAIrF,MAAO,CAACN,MAAO,UAAnB,mBAIJ,kBAAC,IAAD,CAAK2F,KAAM,EAAGC,OAAQ,IAClB,kBAAC,EAAD,CAAOjD,cAAeA,EACfD,iBAAkBA,EAClBE,eAAgBA,EAChBC,YAAaE,Q,gBCAzB8C,G,QAfA,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,OAAQzB,EAAc,EAAdA,SACzC,OACI,+BACI,2BAAOxC,KAAM,QACNkE,KAAI,mBAAcD,GAClBE,MAAOJ,EACPK,GAAIH,EACJxB,UAAS,iBAAYuB,EAAa,WAAa,GAAtC,YAA4CxB,EAAW,WAAY,IAC5EA,SAAUA,IAEjB,0BAAMC,UAAS,UAAKD,EAAW,gBAAkB,KAAOuB,MCkErDM,EAzEG,SAAC,GAA4E,IAA3EJ,EAA0E,EAA1EA,OAAQrD,EAAkE,EAAlEA,cAAe0D,EAAmD,EAAnDA,cAAeC,EAAoC,EAApCA,eAAgB1D,EAAoB,EAApBA,eAAoB,EACpDE,YAAuB,eAD6B,mBACnFG,EADmF,KACtEC,EADsE,OAEtDJ,YAAuB,aAAc,IAFiB,mBAEnFyD,EAFmF,KAEvEC,EAFuE,OAG9D1D,YAAuB,kBAAmB,IAHoB,mBAGnF2D,EAHmF,KAG3EC,EAH2E,KAO1F/D,EAAcgE,iBAAgB,SAAAC,GAAG,OAAI1D,EAAuB,YAAR0D,MAEpDpD,qBAAU,WACN,GAAM+C,IAAe,GACjB,IACQM,OAAOC,KAAKP,EAAW3D,IAAiBmE,QAAUT,EAAgBD,EAAcrC,MAAK,GACpFqC,EAAcrC,MAAK,GAC1B,MAAOgD,GACLX,EAAcrC,MAAK,MAI5B,CAACuC,EAAYP,EAAQK,EAAeC,EAAgB1D,EAAgBK,IAEvE,IAmBM8C,EAAa,SAACkB,GAChB,IACI,OAAOV,EAAWW,OAAOtE,IAAiBsE,OAAOlB,MAAaiB,EAChE,MAAO7C,GACL,OAAO,IAIf,OADA+C,QAAQC,IAAInE,GAER,yBAAKoE,SAAU,SAAAL,GAAC,OAtBG,SAAAA,GACfR,GAAc,SAAAD,GACV,OAAO,eACCA,EADR,eAES3D,EAFT,eAGe2D,EAAW3D,GAH1B,eAIaoD,EAASgB,EAAEM,OAAOpB,aAgBnBqB,CAAeP,KAC/B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKrB,KAAM,EAAGnB,UAAS,mBAAevB,EAAoC,GAAtB,sBAChD,yBAAKqB,QA/BL,WACRrB,GACAyD,GAAU,SAAAD,GAAM,sBAASA,EAAT,eAAkBT,GAAUS,EAAOT,UA8BtCS,EAAOT,GAAU,kBAAC,YAAD,CAAWwB,QAhD7B,KAgDsD,kBAAC,cAAD,CAAaA,QAhDnE,OAmDR,kBAAC,IAAD,CAAK7B,KAAM,EAAGnB,UAAW,mBACrB,6BAAMwB,EAAN,MAEJ,kBAAC,IAAD,CAAKL,KAAM,EAAGrF,MAAO,CAACmH,cAAe,WAvDjC,CAAC,IAAK,IAAK,IAAK,KAwDPC,KAAI,SAAAT,GAAM,OAAI,kBAAC,EAAD,CAAQnB,OAAQmB,EACRzE,IAAKyE,EACLlB,WAAYA,EAAWkB,GACvBjB,OAAQA,EACRzB,UAAWtB,W,UCjEvDtD,EAAaC,IAAbD,UACAyC,EAAWxB,IAAXwB,QAiFQuF,GA/EK,SAAC,GAMjB,IANgF,IAA9D3B,EAA6D,EAA7DA,OAAQrD,EAAqD,EAArDA,cAAeD,EAAsC,EAAtCA,iBAAkBE,EAAoB,EAApBA,eACrDyD,EAAgBuB,cADyD,EAErCC,oBAAS,GAF4B,mBAExEC,EAFwE,KAEzDC,EAFyD,OAGvCF,oBAAS,GAH8B,mBAGxEG,EAHwE,KAG1DC,EAH0D,OAInDJ,mBAAS,IAJ0C,mBAIxEpB,EAJwE,KAIhEC,EAJgE,KAKzEwB,EAAQ,GACLC,EAAI,EAAGA,GAAKnC,EAAQmC,IACzBD,EAAME,KAAKD,GAGf9B,EAAcM,iBAAgB,SAAAC,GAAG,OAAImB,EAAiBnB,MAEtD,IAcMyB,EAAY,WACd,OACI,oCACI,kBAAC,EAAD,4HAIqB,IAAlB5B,EAAOM,OACN,0FAEI,kBAAC,EAAD,CAAWuB,SAAU,CAACC,KAAM,EAAGC,YAAY,EAAMC,OAAQ,6BACrD,4BACKhC,EAAOiB,KAAI,mCAAE1B,EAAF,iBAAwB,wBAAIxD,IAAKwD,GAAT,YAA2BA,QAJ3E,gFASA,OAKhB,OACI,6BACI,kBAAC5D,EAAD,CAAS9B,MAAO,CAACoI,QAAS,SAAUxH,UAAW,KAC3C,yBAAKsD,UAAW,WACX0D,EAAMR,KAAI,SAAAiB,GAAG,OAAI,kBAAC,EAAD,CAAWtC,cAAeA,EACf1D,cAAeA,EACfqD,OAAQ2C,EACRrC,eAAgBN,EAChBxD,IAAKmG,EACL/F,eAAgBA,QAGjD,kBAAC,IAAD,CAAO7C,MAA2B,IAAlB0G,EAAOM,OAAgB,oCAAsC,0BACtE6B,QAASZ,EACTa,SAAU,kBAAMZ,GAAgB,IAChCa,KA1CO,WACtBpG,EAAiBsB,KAAK,SACtBiE,GAAgB,IAyCDc,WAAY,uBACZC,OAAQ,yBAEX,kBAACX,EAAD,OAEJ,kBAAC,IAAD,CAAQtG,KAAM,UAAWwC,SAAUuD,EAAexD,QAzD1C,WAChB,IACIoC,EAAUG,OAAOoC,QAAQC,KAAKC,MAAMlE,eAAemE,QAAQ,qBAAqBC,QAAO,wDACzF,MAAOjF,IAGT6D,GAAgB,IAmDgEqB,OAAK,GAA7E,kCC7BDC,I,QAzCF,WAAO,IAAD,EACIzG,YAAuB,eAAnC0G,EADQ,sBAE6B1G,YAAuB,iBAAkB,GAFtE,mBAERF,EAFQ,KAEQ6G,EAFR,OAG+B5B,qBAH/B,mBAGR6B,EAHQ,KAGSC,EAHT,OAIuB9B,qBAJvB,mBAIR+B,EAJQ,KAIKC,EAJL,KAKTlH,EAAgBiF,cAChBlF,EAAmBkF,cAiBzB,OAfApE,qBAAU,WACN,IAAMsG,EAAUN,EAAQ,SAAa5G,GACrC+G,EAAmBG,EAAO,eAE1BD,EAAeC,EAAO,QACvB,CAAClH,EAAgB8G,EAAiBF,EAAUK,IAE/CnH,EAAiBiE,iBAAgB,SAAAoD,GACnB,UAANA,IACA5C,QAAQC,IAAIP,OAAOmD,OAAOR,GAAUzC,QACpC0C,GAAkB,SAAA7G,GAAc,OAAIA,EAAiB,SAMzD,oCACI,kBAAC,IAAD,CAAQtC,MAAO,CAAC2J,OAAQ,UACpB,kBAAC,EAAD,CAAYvH,iBAAkBA,EAClBC,cAAeA,EACfC,eAAgBA,EAChBG,KAAM6G,IAElB,kBAAC,GAAD,CAAalH,iBAAkBA,EAClBsD,OAAQ0D,EACR/G,cAAeA,EACfC,eAAgBA,Q,4CCpCtCxB,GAASxB,IAATwB,MA8GQ8I,GA5GG,WAAO,IAAD,EACkBrC,mBAAS,GAD3B,mBACbsC,EADa,KACAC,EADA,OAEYtH,YAAuB,cAAe,MAFlD,mBAEHuH,GAFG,aAGcxC,mBAAS,IAHvB,mBAGbyC,EAHa,KAGFC,EAHE,OAIsB1C,mBAAS,IAJ/B,mBAIb2C,EAJa,KAIEC,EAJF,KAKdC,EAAUC,cAuBVC,EAAmB,SAAAjC,GACrB8B,EAAiB,eARK,SAAAI,GACtB,GAAIA,EAAY,EAAG,MAAO,CACtBC,eAAgB,QAChBC,SAAU,mCAKOC,CAAkBrC,EAAIrB,OAAOpB,OAAlC,CAA0CyC,UAGxDsC,EAAe,SAAAtC,GACjB4B,EAAa,eAnBI,SAAAxH,GACjB,GAAIA,EAAO,EAAG,MAAO,CACjB+H,eAAgB,QAChBC,SAAU,wCAgBGG,CAAavC,EAAIrB,OAAOpB,OAA7B,CAAqCyC,UAGrD,OACI,kBAAC,KAAD,CAAM1C,KAAK,yBAAyBkF,SA9BvB,SAAAnB,GACb7C,QAAQC,IAAI,2BAA4B4C,GACxC/E,eAAemG,QACff,EAAYL,GACZU,EAAQW,QAAQ,UA0BwCC,aAAa,OACjE,kBAAC,KAAKC,KAAN,CAAWtF,KAAK,aACX,SAACuF,EAAD,GAA4B,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,OACZ,OACI,6BACSF,EAAO9D,KAAI,SAAAiE,GAAK,OACb,kBAAC,KAAD,CAAOnJ,IAAG,kBAAamJ,EAAMnJ,KACtBoJ,MAAM,QACNtL,MAAO,CAACmF,MAAM,SAEjB,kBAAC,GAAD,CAAO3D,MAAO,GAAd,kBAA6B6J,EAAMnJ,IAAM,GAAzC,KACA,kBAAC,KAAKqJ,KAAN,iBACQF,EADR,CAEI1F,KAAM,CAAC0F,EAAM1F,KAAM,iBACnB6F,SAAU,CAACH,EAAMG,SAAU,iBAC3BC,MAAO,CAAC,CAACC,UAAU,EAAMnK,QAAS,iCAClCiJ,eAAgBN,EAAcM,eAC9BmB,KAAMzB,EAAcO,WAEpB,kBAAC,KAAD,CAAOmB,YAAa,sBAAuBnK,KAAM,SAAUsF,SAAUuD,KAGzE,kBAAC,KAAKiB,KAAN,iBACQF,EADR,CAEI1F,KAAM,CAAC0F,EAAM1F,KAAM,QACnB6F,SAAU,CAACH,EAAMG,SAAU,QAC3BC,MAAO,CAAC,CAACC,UAAU,EAAMnK,QAAS,mCAClCiJ,eAAgBR,EAAUQ,eAC1BmB,KAAM3B,EAAUS,WAEhB,kBAAC,KAAD,CAAOmB,YAAa,OAAQnK,KAAM,SAAUoK,WAAY,UAAW9E,SAAU4D,KAGjF,kBAAC,sBAAD,CACI3G,QAAS,WACL8F,EAAeD,EAAc,GAC7BuB,EAAOC,EAAM1F,OAEjB3F,MAAO,CAACY,UAAW,MAAOX,SAAU,OAAQP,MAAO,aAInE,kBAAC,KAAK6L,KAAN,KACI,kBAAC,IAAD,CACI9J,KAAK,SACLuC,QAAS,WACL8F,EAAeD,EAAc,GAC7BsB,KAEJnC,OAAK,GAEL,kBAAC,eAAD,MARJ,qBAepB,kBAAC,KAAKuC,KAAN,KACI,kBAAC,IAAD,CAAQ9J,KAAK,UACLqK,SAAU,SACV7H,WAAY4F,GAAe,GAC3B7J,MAAO,CAAC+L,WAAY,QAH5B,sBAKuB,kBAAC,gBAAD,UCtFxBC,GAjBD,WACV,IAAMC,EAAc,kBAAC,kBAAD,CAAiBjM,MAAO,CAACC,SAAU,IAAKiM,MAAI,IAChE,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAaxL,QAAS,IACtB,kBAAC,IAAOoB,QAAR,CAAgB9B,MAAO,CAACW,gBAAiB,UACrC,kBAAC,IAAD,CAAQoB,KAAM,kBAAC,KAAD,CAAMoK,UAAWF,IACvBxM,MAAM,gBACNuC,SAAS,qCAEb,kBAAC,GAAD,UCbb3C,GAA0BC,IAA1BD,UAAWE,GAAeD,IAAfC,KAAMuB,GAASxB,IAATwB,MAElBsL,GAAiB,WACnB,OACI,oCACI,kBAAC,IAAD,CAASjM,YAAa,QAAtB,6CACA,kBAAC,GAAD,mSASNkM,GAAkB,WACpB,OACI,oCACI,kBAAC,IAAD,CAASlM,YAAa,QAAtB,mCACA,kBAAC,GAAD,whBAYNmM,GAAiB,WACnB,OACI,oCACI,kBAAC,IAAD,CAASnM,YAAa,QAAtB,yEAEA,kBAAC,GAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKkF,KAAM,IACP,kBAAC,GAAD,CAAO7D,MAAO,GAAd,UACA,4BACI,2CACA,4BAAI,kBAAC,IAAD,CAAS/B,MAAO,oCAAhB,kBACJ,4BAAI,kBAAC,IAAD,CAASA,MAAO,yCAAhB,iBACJ,4BAAI,kBAAC,IAAD,CAASA,MAAO,kEAAhB,gBAEJ,4BAAI,kBAAC,IAAD,CAASA,MAAO,wCAAhB,wBAIZ,kBAAC,IAAD,CAAK4F,KAAM,IACP,kBAAC,GAAD,CAAO7D,MAAO,GAAd,UACA,4BACI,4BAAI,kBAAC,IAAD,CAAS/B,MAAO,iEAAhB,gBAEJ,4BAAI,kBAAC,IAAD,CAASA,MAAO,iEAAhB,0DAU1B8M,GAAkB,WACpB,OACI,oCACI,kBAAC,IAAD,CAASpM,YAAa,QAAtB,yBACA,kBAAC,GAAD,kLAEuE,2CAFvE,yIAwBGqM,GAbQ,WACnB,OACI,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,SC/DDC,GAtBI,WACf,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAa/L,QAAS,IACtB,kBAAC,IAAOoB,QAAR,CAAgB9B,MAAO,CAACW,gBAAiB,UACrC,kBAAC,IAAD,CAAQ+L,OAAQ,QACRjN,MAAO,aACPuC,SAAU,sDAEd,6BACI,kBAAC,GAAD,MACA,yBAAKhC,MAAO,CAAC4B,UAAW,UACpB,kBAAC,IAAD,CAAQxB,KAAM,QAASJ,MAAO,CAACmB,YAAa,SAA5C,iBACA,kBAAC,IAAD,CAAQf,KAAM,SAAUqB,KAAM,WAA9B,iCCWbkL,OArBf,WACI,OACI,kBAAC,IAAD,CAAQC,SAAUC,kBACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAM,eACT,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,SACR,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,UCVAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,QCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjK,GACL+C,QAAQ/C,MAAMA,EAAMvC,a","file":"static/js/main.b14318b1.chunk.js","sourcesContent":["import React from \"react\";\nimport {Divider, Tooltip, Typography} from \"antd\";\nimport {CheckCircleTwoTone, MinusCircleTwoTone, CloseCircleTwoTone } from \"@ant-design/icons/lib\";\n\nconst {Paragraph, Text} = Typography;\n\nconst Added = () => <Tooltip title={\"Added!\"} color={\"#52c41a\"}><CheckCircleTwoTone twoToneColor={\"#52c41a\"}/></Tooltip>\nconst Development = () => <Tooltip title={\"In development!\"} color={\"#eab832\"}><MinusCircleTwoTone twoToneColor={\"#eab832\"}/></Tooltip>\nconst NotAFeature = () => <Tooltip title={\"Not in development.\"} color={\"#f52b2b\"}><CloseCircleTwoTone twoToneColor={\"#f52b2b\"}/></Tooltip>\n\n\nconst FeatureList = () => {\n    return (\n        <Paragraph>\n            <Text strong\n                  style={{fontSize: 16}}\n            >\n                What Exam Simulator does feature:\n            </Text>\n            <br/>\n            <Added/> Multiple Choice Questions <br/>\n            <Added/> Timer <br/>\n            <Added/> Ability to Stop or Start Timer <br/>\n            <Added/> Clean User Interface <br/>\n            <Added/> Ability to create your own Exams <br/>\n            <Development/> Free Answer Questions <br/>\n            <Development/> Save your answers as a <code>.csv</code>, <code>.txt</code>, or <code>.json</code> file <br/>\n            <Development/> Timing statistics <br/>\n            <Divider/>\n            <Text strong\n                  style={{fontSize: 16}}\n            >\n                What Exam Simulator doesn't feature:\n            </Text>\n            <br/>\n            <NotAFeature/> Saving exams where you left off <br/>\n            <NotAFeature/> Exam grading <br/>\n            <NotAFeature/> Sharing exam results on social media <br/>\n            <NotAFeature/> Accounts to save your previous exams <br/>\n        </Paragraph>\n    )\n}\n\nexport default FeatureList;","import React from \"react\";\nimport {Tooltip, Typography, Divider} from \"antd\";\nimport FeatureList from \"./FeatureList\";\n\nconst {Paragraph, Text} = Typography;\n\nconst InfoText = () => {\n    return (\n        <>\n        <Divider orientation={\"left\"}>What is Exam Simulator?</Divider>\n        <Paragraph>\n            <Text>\n                Exam Simulator at its core was designed for taking the SAT practice tests.\n                I needed to take practice exams so that I can improve my score, but the issue is that if I were to\n                just use a PDF practice test I found online, I would be needing to write on a piece of paper all my\n                answers to\n                <Tooltip title={\"Excluding a few math questions...\"}>\n                    <strong> MULTIPLE CHOICE QUESTIONS</strong>\n                </Tooltip>. This would mean that I would use my entire keyboard to write 4 letters. I didn't like\n                this idea, so I decided to create an alternative, which is what you're on right now!\n            </Text>\n        </Paragraph>\n        <Divider orientation={\"left\"}>What does Exam Simulator do?</Divider>\n        <Paragraph>\n            <Text>\n                This entire site is dedicated to simulating an\n                <Tooltip title={\"Shocking isn't it?\"}> Exam</Tooltip>. But instead of making this project focused\n                only on the SAT, I've decided to make this more flexible. This means you can add as many questions and\n                sections you feel like adding to simulate your test. This tool is for <strong>taking</strong> multiple\n                choice exams, not for grading. This tool offers functionalities to make taking multiple choice\n                exams easy to use.\n            </Text>\n        </Paragraph>\n        <Divider orientation={\"left\"}>Why should I use Exam Simulator?</Divider>\n        <Paragraph>\n            <Text>\n                If you have an multiple choice exam that is written on a PDF file, you can use this tool to get the\n                full multiple choice experience of filling bubbles rather than using your keyboard to type out only 4\n                letters. This tool is built to make online exam taking using non-interactive mediums easier.\n            </Text>\n            <br/>\n            <br/>\n            <FeatureList/>\n            <Divider/>\n            <Text>\n                Last thing, this entire project is open sourced and available on\n                <a href={\"https://github.com/anishg24/ExamSimulator\"}> GitHub</a>. Check it out there!\n            </Text>\n        </Paragraph>\n        </>\n    )\n}\n\nexport default InfoText;","import React from \"react\";\nimport {Layout, Steps} from \"antd\";\n\nconst {Header} = Layout;\nconst {Step} = Steps;\n\nconst HeaderSteps = ({current}) => {\n    return (\n        <Header style={{backgroundColor: \"white\"}}>\n            <Steps current={current} style={{marginTop: \"5px\"}}>\n                <Step title={\"Information\"} description={\"Basic Info\"}/>\n                <Step title={\"Disclaimer\"} description={\"Important Info\"}/>\n                <Step title={\"Setup\"} description={\"Setting up your exam\"}/>\n                <Step title={\"Exam\"} description={\"Let's take the exam!\"}/>\n            </Steps>\n        </Header>\n    )\n}\n\nexport default HeaderSteps;","import React from \"react\";\nimport {Result, Button, Layout, Badge, Alert, Typography} from \"antd\";\nimport {FormOutlined} from \"@ant-design/icons/lib\";\nimport InfoText from \"./InfoText\";\nimport \"./Info.css\"\nimport HeaderSteps from \"../Common/HeaderSteps\";\n\nconst {Title} = Typography;\n\nconst InfoTitle = () => {\n    return (\n        <Badge.Ribbon text={\"ALPHA\"} style={{position: \"absolute\", marginRight: \"52em\", marginBottom: \"10px\"}} placement={\"end\"} color={\"red\"}>\n            Exam Simulator\n        </Badge.Ribbon>\n    )\n}\n\nconst AlphaAlert = () => {\n    return (\n        <>\n            <br/>\n            <Alert message={<Title level={3}>Alpha Release</Title>}\n                   description={\"Not all functionality shown below is implemented. This is a proof of concept release. Use with caution!\"}\n                   type={\"error\"}\n                   closable\n                   showIcon\n                   style={{textAlign: \"left\"}}\n            />\n        </>\n    )\n}\n\n\nconst Info = () => {\n\n    return (\n        <Layout>\n            <HeaderSteps current={0}/>\n            <Layout.Content style={{backgroundColor: \"white\"}}>\n            <Result\n                icon={<FormOutlined/>}\n                title={<InfoTitle/>}\n                subTitle=\"An easy way for you to take a timed multiple choice exam.\"\n                extra={[\n                    <Button type={\"primary\"} href={\"/disclaimer\"} key={2}>Get Started</Button>,\n                    <br key={3}/>,\n                    <AlphaAlert key={4}/>\n                ]}\n            >\n                <div>\n                    <InfoText/>\n                </div>\n            </Result>\n            </Layout.Content>\n        </Layout>\n    )\n}\n\nexport default Info;","import React, {useEffect, useRef} from \"react\";\nimport {useSessionStorageState, useUpdateEffect} from '@umijs/hooks';\nimport Countdown from \"react-countdown\";\nimport {Button, Popover, message} from \"antd\";\nimport moment from 'moment';\n\nconst Timer = ({goToNextSection$, timerStopped$, currentSection, defaultTime}) => {\n    const [time, setTime] = useSessionStorageState(\"timeLeft\", -1);\n    const [timerActive, setTimerActive] = useSessionStorageState(\"timerActive\", false);\n    const timeStarted = useRef(Date.now());\n    const cachedSection = useRef(currentSection);\n\n\n    useEffect(() => {\n        if (time === -1 && defaultTime !== undefined) setTime(moment.duration(defaultTime, \"minutes\").asMilliseconds());\n        if (currentSection !== cachedSection.current){\n            setTime(moment.duration(defaultTime, \"minutes\").asMilliseconds())\n            timeStarted.current = Date.now();\n            cachedSection.current = currentSection;\n            handleStop();\n        }\n    }, [defaultTime]);\n\n    const timerRef = useRef();\n\n    const handleStart = () => {\n        setTimerActive(true);\n        timerStopped$.emit(\"started\")\n        timerRef.current.start();\n        message.success(\"Started the timer! Good Luck!\");\n    };\n    const handleStop = () => {\n        setTimerActive(false);\n        timerStopped$.emit(\"stopped\");\n        timerRef.current.pause();\n        message.error(\"Stopped the timer! Start it to keep going!\")\n    };\n\n\n    const renderer = ({total, completed, formatted}) => {\n        sessionStorage.setItem(\"timeLeft\", total)\n        if (completed) return <h3 className={\"timer-text\"}>DONE</h3>;\n        else return <span>{formatted.hours}:{formatted.minutes}:{formatted.seconds} left</span>;\n    }\n\n    const TimerMenu = () => {\n        return (\n            <div>\n                <Button type={\"danger\"} onClick={handleStop} style={{marginRight: \"5px\"}}\n                        disabled={!timerActive}>Stop</Button>\n                <Button type={\"primary\"} onClick={handleStart} disabled={timerActive}>Start</Button>\n            </div>\n        )\n    }\n\n    return (\n        <Popover\n            content={TimerMenu}\n            placement={\"bottomRight\"}\n            title={\"Timer Menu\"}\n        >\n            <div className={\"timer-text\"}>\n                <Countdown\n                    date={Number(timeStarted.current + time)}\n                    autoStart={timerActive}\n                    ref={timerRef}\n                    renderer={renderer}\n                    zeroPadTime={2}\n                />\n            </div>\n        </Popover>\n\n    )\n}\n\nexport default Timer;","import React from \"react\";\nimport {Layout, Row, Col} from \"antd\";\nimport Timer from \"./Timer\";\n\nconst {Header} = Layout;\n\nconst ExamHeader = ({timerStopped$, goToNextSection$, currentSection, time}) => {\n    return (\n        <Header style={{position: \"fixed\", zIndex: 1, width: '100%'}}>\n            <Row gutter={16}>\n                <Col span={6}>\n                    <h1 style={{color: \"white\"}}>\n                        Exam Simulator\n                    </h1>\n                </Col>\n                <Col span={6} offset={12}>\n                    <Timer timerStopped$={timerStopped$}\n                           goToNextSection$={goToNextSection$}\n                           currentSection={currentSection}\n                           defaultTime={time}\n                    />\n                </Col>\n            </Row>\n        </Header>\n    )\n}\n\nexport default ExamHeader;","import React from \"react\";\n// import './BubbleRow.css';\n\n\nconst Bubble = ({letter, isSelected, number, disabled}) => {\n    return (\n        <label >\n            <input type={\"radio\"}\n                   name={`question-${number}`}\n                   value={letter}\n                   id={number}\n                   className={`bubble ${isSelected ? \"selected\" : \"\"} ${disabled ? \"disabled\": \"\"}`}\n                   disabled={disabled}\n            />\n            <span className={`${disabled ? \"disabled-text\" : \"\"}`}>{letter}</span>\n        </label>\n    )\n}\n\nexport default Bubble;","import React, {useEffect} from \"react\";\nimport \"./BubbleRow.css\";\nimport Bubble from \"./Bubble\";\nimport {Row, Col} from \"antd\";\nimport {TagOutlined, TagFilled} from \"@ant-design/icons/lib\";\nimport {useSessionStorageState} from \"@umijs/hooks\";\n\nconst BubbleRow = ({number, timerStopped$, enableButton$, totalQuestions, currentSection}) => {\n    const [timerActive, setTimerActive] = useSessionStorageState(\"timerActive\");\n    const [answerData, setAnswerData] = useSessionStorageState(\"answerData\", {});\n    const [marked, setMarked] = useSessionStorageState(\"markedQuestions\", []);\n    const choices = [\"A\", \"B\", \"C\", \"D\"];\n    const tagRotation = -45;\n\n    timerStopped$.useSubscription(val => setTimerActive(val === \"started\"))\n\n    useEffect(() => {\n        if (!(answerData === {})) {\n            try{\n                if (Object.keys(answerData[currentSection]).length >= totalQuestions) enableButton$.emit(false); // False means not disabled\n                else enableButton$.emit(true);\n            } catch (e) {\n                enableButton$.emit(true)\n            }\n\n        }\n    }, [answerData, number, enableButton$, totalQuestions, currentSection, timerActive]);\n\n    const markRow = () => {\n        if (timerActive) {\n            setMarked(marked => ({...marked, [number]: !marked[number]}));\n        }\n    }\n\n    const handleOnChange = e => {\n            setAnswerData(answerData => {\n                return (\n                    {...answerData,\n                        [currentSection]: {\n                            ...answerData[currentSection],\n                            [number]: e.target.value\n                        }\n                    }\n                )\n            });\n    }\n\n    const isSelected = (choice) => {\n        try {\n            return answerData[String(currentSection)][String(number)] === choice\n        } catch (error){\n            return false;\n        }\n    }\n    console.log(timerActive)\n    return (\n        <div onChange={e => handleOnChange(e)}>\n            <Row>\n                <Col span={1} className={`bookmark ${!timerActive ? \"disabled-bookmark\" : \"\"}`}>\n                    <div onClick={markRow}>\n                        {marked[number] ? <TagFilled rotate={tagRotation}/> : <TagOutlined rotate={tagRotation}/>}\n                    </div>\n                </Col>\n                <Col span={1} className={\"question-number\"}>\n                    <div>{number}.</div>\n                </Col>\n                <Col span={5} style={{verticalAlign: \"middle\"}}>\n                    {choices.map(choice => <Bubble letter={choice}\n                                                   key={choice}\n                                                   isSelected={isSelected(choice)}\n                                                   number={number}\n                                                   disabled={!timerActive}\n                    />)}</Col>\n            </Row>\n        </div>\n\n    )\n\n}\n\nexport default BubbleRow;","import React, {useState} from \"react\";\nimport {Button, Layout, Typography} from \"antd\";\nimport BubbleRow from \"../BubbleRow/BubbleRow\";\nimport {useEventEmitter} from \"@umijs/hooks\";\nimport {Modal} from \"antd\";\n\nconst {Paragraph} = Typography;\nconst {Content} = Layout;\n\nconst ExamContent = ({number, timerStopped$, goToNextSection$, currentSection}) => {\n    const enableButton$ = useEventEmitter();\n    const [disableButton, setDisableButton] = useState(true);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [marked, setMarked] = useState([]);\n    const myArr = [];\n    for (let i = 1; i <= number; i++) {\n        myArr.push(i);\n    }\n\n    enableButton$.useSubscription(val => setDisableButton(val))\n\n    const handleReady = () => {\n        try {\n            setMarked(Object.entries(JSON.parse(sessionStorage.getItem(\"markedQuestions\"))).filter(([number, isMarked]) => isMarked));\n        } catch (error){\n\n        }\n        setModalVisible(true);\n    }\n\n    const handleNextSection = () => {\n        goToNextSection$.emit(\"ready\");\n        setModalVisible(false);\n    }\n\n    const ModalInfo = () => {\n        return (\n            <>\n                <Paragraph>\n                    Are you sure that you're done with this section? If you still have time, I recommend you double\n                    check your answers!\n                </Paragraph>\n                {!(marked.length === 0) ? (\n                    <>\n                        You left the following questions marked for review:\n                        <Paragraph ellipsis={{rows: 5, expandable: true, symbol: 'See all marked questions'}}>\n                            <ul>\n                                {marked.map(([number, isMarked]) => <li key={number}>Question {number}</li>)}\n                            </ul>\n                        </Paragraph>\n                        You can choose to continue without going back, but I recommend the opposite.\n                    </>\n                ) : null}\n            </>\n        )\n    }\n\n    return (\n        <div>\n            <Content style={{padding: '0 50px', marginTop: 64}}>\n                <div className={\"content\"}>\n                    {myArr.map(num => <BubbleRow enableButton$={enableButton$}\n                                                 timerStopped$={timerStopped$}\n                                                 number={num}\n                                                 totalQuestions={number}\n                                                 key={num}\n                                                 currentSection={currentSection}\n                    />)}\n                </div>\n                <Modal title={!(marked.length === 0) ? \"You left some marked questions...\" : \"Obligatory Confirmation\"}\n                       visible={modalVisible}\n                       onCancel={() => setModalVisible(false)}\n                       onOk={handleNextSection}\n                       cancelText={\"On second thought...\"}\n                       okText={\"I'm ready to move on!\"}\n                >\n                    <ModalInfo/>\n                </Modal>\n                <Button type={\"primary\"} disabled={disableButton} onClick={handleReady} block>\n                    I'm done with this section!\n                </Button>\n            </Content>\n        </div>\n\n\n    );\n}\n\nexport default ExamContent;","import React, {useEffect, useState} from \"react\";\nimport {Layout} from \"antd\";\nimport ExamHeader from \"./ExamHeader\";\nimport ExamContent from \"./ExamContent\";\nimport './Exam.css';\nimport {useEventEmitter, useSessionStorageState} from \"@umijs/hooks\";\nimport moment from 'moment';\n\nconst Exam = () => {\n    const [sections] = useSessionStorageState(\"sectionData\");\n    const [currentSection, setCurrentSection] = useSessionStorageState(\"currentSection\", 0);\n    const [numberQuestions, setNumberQuestions] = useState();\n    const [sectionTime, setSectionTime] = useState();\n    const timerStopped$ = useEventEmitter();\n    const goToNextSection$ = useEventEmitter();\n\n    useEffect(() => {\n        const section = sections[\"sections\"][currentSection]\n        setNumberQuestions(section[\"num_questions\"]);\n        // setSectionTime(moment.duration(section[\"time\"], \"minutes\").asMilliseconds());\n        setSectionTime(section[\"time\"])\n    }, [currentSection, numberQuestions, sections, setSectionTime])\n\n    goToNextSection$.useSubscription(v => {\n        if (v === \"ready\") {\n            console.log(Object.values(sections).length)\n            setCurrentSection(currentSection => currentSection + 1);\n        }\n    })\n\n\n    return (\n        <>\n            <Layout style={{height: \"100vh\"}}>\n                <ExamHeader goToNextSection$={goToNextSection$}\n                            timerStopped$={timerStopped$}\n                            currentSection={currentSection}\n                            time={sectionTime}\n                />\n                <ExamContent goToNextSection$={goToNextSection$}\n                             number={numberQuestions}\n                             timerStopped$={timerStopped$}\n                             currentSection={currentSection}\n                />\n            </Layout>\n        </>\n    );\n}\n\nexport default Exam;","import React, {useState} from \"react\";\nimport {Form, Space, Button, Input, Typography} from \"antd\";\nimport {MinusCircleOutlined, PlusOutlined, RightOutlined} from \"@ant-design/icons/lib\";\nimport {useSessionStorageState} from \"@umijs/hooks\";\nimport {useHistory} from 'react-router-dom';\n\nconst {Title} = Typography;\n\nconst SetupForm = () => {\n    const [numSections, setNumSections] = useState(0);\n    const [sections, setSections] = useSessionStorageState(\"sectionData\", null);\n    const [timeError, setTimeError] = useState({});\n    const [questionError, setQuestionError] = useState({});\n    const history = useHistory();\n\n    const onFinish = values => {\n        console.log('Received values of form:', values);\n        sessionStorage.clear();\n        setSections(values);\n        history.replace(\"/exam\");\n    };\n\n    const validateTime = time => {\n        if (time < 1) return {\n            validateStatus: 'error',\n            errorMsg: \"Choose a time greater than 1 minute!\"\n        }\n    }\n\n    const validateQuestions = questions => {\n        if (questions < 1) return {\n            validateStatus: \"error\",\n            errorMsg: \"Choose greater than 1 question!\"\n        }\n    }\n\n    const onQuestionChange = num => {\n        setQuestionError({...validateQuestions(num.target.value), num})\n    }\n\n    const onTimeChange = num => {\n        setTimeError({...validateTime(num.target.value), num})\n    }\n\n    return (\n        <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\n            <Form.List name=\"sections\">\n                {(fields, {add, remove}) => {\n                    return (\n                        <div>\n                                {fields.map(field => (\n                                    <Space key={`section-${field.key}`}\n                                           align=\"start\"\n                                           style={{width:\"100%\"}}\n                                    >\n                                        <Title level={3}>{`Section ${field.key + 1}`}:</Title>\n                                        <Form.Item\n                                            {...field}\n                                            name={[field.name, 'num_questions']}\n                                            fieldKey={[field.fieldKey, 'num_questions']}\n                                            rules={[{required: true, message: 'Missing number of questions.'}]}\n                                            validateStatus={questionError.validateStatus}\n                                            help={questionError.errorMsg}\n                                        >\n                                            <Input addonBefore={\"Number of Questions\"} type={\"number\"} onChange={onQuestionChange}/>\n                                        </Form.Item>\n\n                                        <Form.Item\n                                            {...field}\n                                            name={[field.name, 'time']}\n                                            fieldKey={[field.fieldKey, 'time']}\n                                            rules={[{required: true, message: 'Missing time for this section.'}]}\n                                            validateStatus={timeError.validateStatus}\n                                            help={timeError.errorMsg}\n                                        >\n                                            <Input addonBefore={\"Time\"} type={\"number\"} addonAfter={\"minutes\"} onChange={onTimeChange}/>\n                                        </Form.Item>\n\n                                        <MinusCircleOutlined\n                                            onClick={() => {\n                                                setNumSections(numSections - 1);\n                                                remove(field.name);\n                                            }}\n                                            style={{marginTop: \"6px\", fontSize: \"20px\", color: \"red\"}}\n                                        />\n                                    </Space>\n                                ))}\n                            <Form.Item>\n                                <Button\n                                    type=\"dashed\"\n                                    onClick={() => {\n                                        setNumSections(numSections + 1);\n                                        add();\n                                    }}\n                                    block\n                                >\n                                    <PlusOutlined/> Add Section\n                                </Button>\n                            </Form.Item>\n                        </div>\n                    );\n                }}\n            </Form.List>\n            <Form.Item>\n                <Button type=\"primary\"\n                        htmlType={\"submit\"}\n                        disabled={!(numSections >= 1)}\n                        style={{marginLeft: \"44%\"}}\n                >\n                    Let's get started! <RightOutlined/>\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default SetupForm;","import React from \"react\";\nimport {Spin, Result, Layout} from \"antd\";\nimport SetupForm from \"./SetupForm\";\nimport {SettingOutlined} from \"@ant-design/icons/lib\";\nimport HeaderSteps from \"../Common/HeaderSteps\";\n\nconst Setup = () => {\n    const settingIcon = <SettingOutlined style={{fontSize: 64}} spin/>\n    return (\n        <Layout>\n            <HeaderSteps current={2}/>\n            <Layout.Content style={{backgroundColor: \"white\"}}>\n                <Result icon={<Spin indicator={settingIcon}/>}\n                        title=\"Setup an Exam\"\n                        subTitle=\"It's as easy as adding a section!\"\n                >\n                    <SetupForm/>\n                </Result>\n            </Layout.Content>\n        </Layout>\n    )\n}\n\nexport default Setup;","import React from \"react\";\nimport {Typography, Divider, Tooltip, Row, Col} from \"antd\";\n\nconst {Paragraph, Text, Title} = Typography;\n\nconst FirstParagraph = () => {\n    return (\n        <>\n            <Divider orientation={\"left\"}>Exam Simulator is built on the front end.</Divider>\n            <Text>\n                The choice of making exam simulator was clear for me to build it on the front end. I wouldn't\n                have to pay for hosting services, so I can afford to make this tool free. But since this site\n                doesn't have a back end service to connect to, I can't add features like users and accounts.\n            </Text>\n        </>\n    )\n}\n\nconst SecondParagraph = () => {\n    return (\n        <>\n            <Divider orientation={\"left\"}>What is the need of a back end?</Divider>\n            <Text>\n                For this project, I thought this exactly as well. This tool is designed for you to quickly use\n                and then do as you wish. This doesn't fit the criteria for a need of a back end server. A back end\n                essentially manages all the data of the server. This includes user accounts, user data, test data,\n                and other data that is relevant to the site. But since this site is designed to only provide a quick\n                use for tests, using a back end isn't that important as all the data that is relevant to you can be\n                saved locally on your computer.\n            </Text>\n        </>\n    )\n}\n\nconst ThirdParagraph = () => {\n    return (\n        <>\n            <Divider orientation={\"left\"}>What are the pros and cons of having Exam Simulator on the front\n                end?</Divider>\n            <Text>\n                <Row>\n                    <Col span={12}>\n                        <Title level={4}>Pros: </Title>\n                        <ul>\n                            <li>Free to use</li>\n                            <li><Tooltip title={\"You don't need an account to use\"}>Simple to use</Tooltip></li>\n                            <li><Tooltip title={\"Your data doesn't leave your computer\"}>100% private</Tooltip></li>\n                            <li><Tooltip title={\"All the computations is handled on YOUR computer, not a server\"}>100%\n                                secure</Tooltip></li>\n                            <li><Tooltip title={\"You can edit and view your own data.\"}>Easily \"hackable\"</Tooltip></li>\n\n                        </ul>\n                    </Col>\n                    <Col span={12}>\n                        <Title level={4}>Cons: </Title>\n                        <ul>\n                            <li><Tooltip title={\"Since we don't use a backend, theres no way to store accounts\"}>No\n                                accounts</Tooltip></li>\n                            <li><Tooltip title={\"Wherever you take the test is where the data for it is stored\"}>No\n                                picking up where you left off across devices</Tooltip></li>\n                        </ul>\n                    </Col>\n                </Row>\n            </Text>\n        </>\n    )\n}\n\nconst FourthParagraph = () => {\n    return (\n        <>\n            <Divider orientation={\"left\"}>Too Long, Didn't Read</Divider>\n            <Text>\n                In a nutshell, the tests you take with Exam Simulator are completely private, but that also means that\n                you can't access them from anywhere else other than the same exact <strong>browser</strong> that you used\n                to take them.\n\n                Now that you are familiar with the drawbacks of this tool, click \"I understand the above\" to continue.\n            </Text>\n        </>\n    )\n}\n\nconst DisclaimerText = () => {\n    return (\n        <>\n            <Paragraph>\n                <FirstParagraph/>\n                <SecondParagraph/>\n                <ThirdParagraph/>\n                <FourthParagraph/>\n            </Paragraph>\n        </>\n    )\n}\n\nexport default DisclaimerText;","import React from \"react\";\nimport {Result, Layout, Button} from \"antd\";\nimport HeaderSteps from \"../Common/HeaderSteps\";\nimport DisclaimerText from \"./DisclaimerText\";\n\nconst Disclaimer = () => {\n    return (\n        <Layout>\n            <HeaderSteps current={1}/>\n            <Layout.Content style={{backgroundColor: \"white\"}}>\n                <Result status={\"error\"}\n                        title={\"Disclaimer\"}\n                        subTitle={\"Few things you need to know before using this tool\"}\n                >\n                    <div>\n                        <DisclaimerText/>\n                        <div style={{textAlign: \"right\"}}>\n                            <Button href={\"/info\"} style={{marginRight: \"10px\"}}>Take me back!</Button>\n                            <Button href={\"/setup\"} type={\"primary\"}>I understand the above.</Button>\n                        </div>\n                    </div>\n                </Result>\n            </Layout.Content>\n        </Layout>\n    )\n}\n\nexport default Disclaimer;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Info from \"./components/Info/Info\";\nimport Exam from \"./components/Exam/Exam\";\nimport Setup from \"./components/Setup/Setup\";\nimport Disclaimer from \"./components/Disclaimer/Disclaimer\";\n\nfunction App() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route path={\"/disclaimer\"}>\n                    <Disclaimer/>\n                </Route>\n                <Route path=\"/setup\">\n                    <Setup/>\n                </Route>\n                <Route path=\"/exam\">\n                    <Exam/>\n                </Route>\n                <Route path=\"/\">\n                    <Info/>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}