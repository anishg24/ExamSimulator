{"version":3,"sources":["components/Exam/Timer.js","components/Exam/ExamHeader.js","components/BubbleRow/Bubble.js","components/BubbleRow/BubbleRow.js","components/Exam/TimerMenu.js","components/Exam/ExamContent.js","components/Exam/Exam.js","components/Info/FeatureList.js","components/Info/InfoModal.js","components/Info/Info.js","components/Setup/SetupModal.js","components/Setup/SetupForm.js","components/Setup/Setup.js","View.js","App.js","serviceWorker.js","index.js"],"names":["Timer","length","toggle$","useSessionStorageState","time","setTime","useEffect","timerRef","useRef","useSubscription","current","isPaused","sessionStorage","setItem","start","pause","Header","Layout","ExamHeader","setCurrentSection","style","position","zIndex","width","gutter","span","color","offset","Bubble","letter","isSelected","number","type","name","value","id","className","BubbleRow","useState","selectedChoice","setChoice","onChange","e","console","log","target","handleOnChange","map","choice","key","TimerMenu","timerActive","setTimerActive","offsetBottom","textAlign","marginRight","size","icon","ClockCircleOutlined","onClick","emit","getItem","Content","ExamContent","myArr","i","push","padding","marginTop","num","Exam","sections","JSON","parse","currentSection","numberQuestions","Moment","duration","asSeconds","sectionTime","useEventEmitter","Paragraph","Typography","Text","Added","title","twoToneColor","Development","NotAFeature","FeatureList","strong","fontSize","InfoModal","orientation","Title","InfoTitle","Ribbon","text","marginBottom","placement","AlphaAlert","message","level","description","closable","showIcon","Info","setView","infoModalIsVisible","setInfoModalIsVisible","subTitle","extra","centered","visible","onOk","onCancel","okText","cancelText","SetupModal","ellipsis","rows","expandable","symbol","SetupForm","numSections","setNumSections","setSections","timeError","setTimeError","questionError","setQuestionError","confirmationModalVisible","setConfirmationModalVisible","onQuestionChange","questions","validateStatus","errorMsg","validateQuestions","onTimeChange","validateTime","onFinish","values","autoComplete","List","fields","add","remove","field","align","Item","fieldKey","rules","required","help","addonBefore","addonAfter","block","setInterval","htmlType","disabled","marginLeft","Setup","settingIcon","spin","indicator","View","view","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.441190b1.chunk.js","sourcesContent":["import React, {useEffect, useRef} from \"react\";\nimport {useSessionStorageState} from '@umijs/hooks';\nimport Countdown from \"react-countdown\";\n\nconst Timer = ({length, toggle$}) => {\n    const [time, setTime] = useSessionStorageState(\"timeLeft\", length*1000);\n    const [verbosity, setVerbosity] = useSessionStorageState(\"timeVerbosity\", false);\n\n    useEffect(() => {\n        if(time <= 0){\n            setTime(length*1000);\n        }\n    }, [time, length]);\n\n    const timerRef = useRef();\n    const handleStart = () => {\n        sessionStorage.setItem(\"timerActive\", \"true\")\n        timerRef.current.start()\n    };\n    const handleStop = () => {\n        sessionStorage.setItem(\"timerActive\", \"false\")\n        timerRef.current.pause()\n    };\n\n    toggle$.useSubscription(() => {\n        if (timerRef.current.isPaused()) handleStart();\n        else handleStop();\n        // let interval = null;\n        // while (isActive && seconds > 0) {\n        //     interval = setInterval(() => setSeconds(seconds => seconds - 1), 1000);\n        // }\n        // clearInterval(interval);\n    })\n\n    const renderer = ({total, hours, minutes, seconds, completed}) => {\n        sessionStorage.setItem(\"timeLeft\", total);\n        if (completed) return <h3>DONE</h3>;\n        else if (verbosity) return <span>${hours} hours ${minutes} minutes ${seconds} seconds left</span>;\n        else {\n            return <span>{hours}:{minutes}:{seconds} left</span>;       // TODO: Manual zero padding.\n        }\n    }\n\n\n    //\n    // useUpdateEffect(() => {\n    //     let interval = null;\n    //     if (isActive){\n    //         interval = setInterval(() => {\n    //             setSeconds(seconds => seconds - 1);\n    //         }, 1000);\n    //     } else if (!isActive && seconds !== length) {\n    //         clearInterval(interval);\n    //     }\n    //     return () => clearInterval(interval);\n    // }, [isActive, seconds, length, dummy]);\n    //\n    // if (dummy === 0) setDummy(null);\n    //\n    // const getTimeLeft = () => {\n    //     const duration = Moment.duration(seconds, \"seconds\");\n    //     const hours = duration.hours();\n    //     const minutes = duration.minutes();\n    //     const second = duration.seconds();\n    //     let result = '';\n    //     if (verbose){\n    //         if (hours > 0) result = result.concat(result, `${hours} hours `);\n    //         if (minutes > 0) result = result.concat(result, `${minutes} minutes `);\n    //         result = result.concat(`${second} seconds`)\n    //     } else {\n    //         result = `${hours}:${minutes}:${second}`\n    //     }\n    //     return result;\n    // }\n\n    return (\n        // <h3 className={\"timer-text\"}\n        //     onClick={() => setVerbosity(!verbose)}\n        // >\n        //     {getTimeLeft()} left\n        // </h3>\n        <div\n            className={\"timer-text\"}\n            onClick={() => setVerbosity(!verbosity)}\n        >\n            <Countdown\n                date={Number(Date.now() + time)}\n                autoStart={false}\n                ref={timerRef}\n                renderer={renderer}\n                zeroPadTime={2}\n            />\n        </div>\n\n    )\n}\n\nexport default Timer;","import React from \"react\";\nimport {Layout, Row, Col} from \"antd\";\nimport Timer from \"./Timer\";\n\nconst {Header} = Layout;\n\nconst ExamHeader = ({toggle$, time, setCurrentSection}) => {\n    return (\n        <Header style={{position: \"fixed\", zIndex: 1, width: '100%'}}>\n            <Row gutter={16}>\n                <Col span={6}>\n                    <h1 style={{color: \"white\"}}>\n                        Exam Simulator\n                    </h1>\n                </Col>\n                <Col span={6} offset={12}>\n                    <Timer length={time} toggle$={toggle$} setCurrentSection={setCurrentSection}/>\n                </Col>\n            </Row>\n        </Header>\n    )\n}\n\nexport default ExamHeader;","import React from \"react\";\nimport './BubbleRow.css';\n\n\nconst Bubble = ({letter, isSelected, number}) => {\n    return (\n        <label >\n            <input type={\"radio\"}\n                   name={`question-${number}`}\n                   value={letter}\n                   id={number}\n                   className={`bubble ${isSelected ? \"selected\" : \"\"}`}\n            />\n            <span>{letter}</span>\n        </label>\n    )\n}\n\nexport default Bubble;","import React, {useState} from \"react\";\nimport \"./BubbleRow.css\";\nimport Bubble from \"./Bubble\";\n\nconst BubbleRow = ({number}) => {\n    const [selectedChoice, setChoice] = useState(null);\n    const choices = [\"A\", \"B\", \"C\", \"D\"];\n    const handleOnChange = e => {\n        console.log(`${number}. ${e.target.value}`);\n        setChoice(e.target.value);\n    }\n\n    return (\n        <div onChange={e => handleOnChange(e)}>\n            <span className={\"question-number\"}>{number}.</span>\n            {choices.map(choice => <Bubble letter={choice}\n                                           key={choice}\n                                           isSelected={selectedChoice === choice}\n                                           number={number}\n                                    />)}\n        </div>\n\n    )\n\n}\n\nexport default BubbleRow;","import React, {useEffect, useState} from \"react\";\nimport {Avatar, Dropdown, Affix} from \"antd\";\nimport {ClockCircleOutlined} from '@ant-design/icons';\nimport {useSessionStorageState, useUpdateEffect} from \"@umijs/hooks\";\n\nconst TimerMenu = ({toggle$}) => {\n    const [timerActive, setTimerActive] = useState();\n    const toggleTimer = () => {\n        toggle$.emit()\n        setTimerActive(sessionStorage.getItem(\"timerActive\") === \"true\");\n    }\n\n    return (\n        <Affix offsetBottom={10} style={{textAlign: \"right\", marginRight: 5}}>\n            <Avatar className={`timer-menu ${timerActive ? 'active': 'not-active'}`}\n                    size={40}\n                    icon={<ClockCircleOutlined />}\n                    onClick={() => toggleTimer()}\n            />\n        </Affix>\n    )\n}\n\nexport default TimerMenu;","import React from \"react\";\nimport {Layout} from \"antd\";\nimport BubbleRow from \"../BubbleRow/BubbleRow\";\nimport TimerMenu from \"./TimerMenu\";\n\nconst {Content} = Layout;\n\nconst ExamContent = ({number, toggle$}) => {\n    const myArr = [];\n    for (let i = 1; i <= number; i++){\n        myArr.push(i);\n    }\n    return (\n        <div>\n            <Content style={{padding: '0 50px', marginTop: 64}}>\n                <div className={\"content\"}>\n                    {myArr.map(num => <BubbleRow number={num} key={num}/>)}\n                </div>\n            </Content>\n            <TimerMenu toggle$={toggle$}/>\n        </div>\n\n\n    );\n}\n\nexport default ExamContent;","import React, {useEffect, useState} from \"react\";\nimport {Layout} from \"antd\";\nimport ExamHeader from \"./ExamHeader\";\nimport ExamContent from \"./ExamContent\";\nimport './Exam.css';\nimport {useEventEmitter, useSessionStorageState} from \"@umijs/hooks\";\nimport Moment from 'moment';\n\nconst Exam = () => {\n    const sections = JSON.parse(sessionStorage.getItem(\"sectionData\"))[\"sections\"];\n    const [currentSection, setCurrentSection] = useSessionStorageState(\"currentSection\", 0);\n    const [numberQuestions, setNumberQuestions] = useState(sections[currentSection][\"num_questions\"]);\n    const [sectionTime, setSectionTime] = useState(Moment.duration(sections[currentSection][\"time\"], \"minutes\").asSeconds());\n    const toggle$ = useEventEmitter();\n\n    return (\n        <Layout>\n            <ExamHeader toggle$={toggle$} setCurrentSection={setCurrentSection} time={sectionTime}/>\n            <ExamContent number={numberQuestions} toggle$={toggle$}/>\n        </Layout>\n    );\n}\n\nexport default Exam;","import React from \"react\";\nimport {Divider, Tooltip, Typography} from \"antd\";\nimport {ExclamationCircleTwoTone, CheckCircleTwoTone, MinusCircleTwoTone, CloseCircleTwoTone } from \"@ant-design/icons/lib\";\n\nconst {Paragraph, Text} = Typography;\n\nconst Added = () => <Tooltip title={\"Added!\"} color={\"#52c41a\"}><CheckCircleTwoTone twoToneColor={\"#52c41a\"}/></Tooltip>\nconst Development = () => <Tooltip title={\"In development!\"} color={\"#eab832\"}><MinusCircleTwoTone twoToneColor={\"#eab832\"}/></Tooltip>\nconst NotAFeature = () => <Tooltip title={\"I can't add this :(\"} color={\"#f52b2b\"}><CloseCircleTwoTone twoToneColor={\"#f52b2b\"}/></Tooltip>\n\n\nconst FeatureList = () => {\n    return (\n        <Paragraph>\n            <Text strong\n                  style={{fontSize: 16}}\n            >\n                What Exam Simulator does feature:\n            </Text>\n            <br/>\n            <Added/> Multiple Choice Questions <br/>\n            <Added/> Timer <br/>\n            <Added/> Ability to Stop or Start Timer <br/>\n            <Added/> Clean User Interface <br/>\n            <Added/> Ability to create your own Exams <br/>\n            <Development/> Free Answer Questions <br/>\n            <Development/> Save your answers as a <code>.csv</code>, <code>.txt</code>, or <code>.json</code> file <br/>\n            <Development/> Timing statistics <br/>\n            <Divider/>\n            <Text strong\n                  style={{fontSize: 16}}\n            >\n                What Exam Simulator doesn't feature:\n            </Text>\n            <br/>\n            <NotAFeature/> Saving exams where you left off <br/>\n            <NotAFeature/> Exam grading <br/>\n            <NotAFeature/> Sharing exam results on social media <br/>\n            <NotAFeature/> Accounts to save your previous exams <br/>\n        </Paragraph>\n    )\n}\n\nexport default FeatureList;","import React from \"react\";\nimport {Tooltip, Typography, Divider} from \"antd\";\nimport FeatureList from \"./FeatureList\";\n\nconst {Paragraph, Text} = Typography;\n\nconst InfoModal = () => {\n    return (\n        <Paragraph>\n            <Text>Hey there! Welcome to Exam Simulator!</Text>\n            <Divider orientation={\"left\"}>What is Exam Simulator?</Divider>\n            <Text>\n                You might be wondering what this is. Exam Simulator at its core was designed for taking the SAT test.\n                I needed to take practice exams so that I can improve my score, but the issue is that if I were to\n                just use a PDF practice test I found online, I would be needing to write on a piece of paper all my\n                answers to\n                <Tooltip title={\"Excluding a few math questions...\"}>\n                    <strong> MULTIPLE CHOICE QUESTIONS</strong>\n                </Tooltip>. This would mean that I would use my entire keyboard to write 4 letters. I didn't like\n                this idea, so I decided to create an alternative, which is what you're on right now!\n            </Text>\n            <Divider orientation={\"left\"}>What does Exam Simulator do?</Divider>\n            <Text>\n                This entire site is dedicated to simulating an\n                <Tooltip title={\"Shocking isn't it?\"}> Exam</Tooltip>. But instead of making this project tunnel visioned, I've decided to make this more usable.\n                This means that I have made it so that you can customize your own Exam on this test to your liking.\n                In a minute you will be creating an exam that you will take shortly after. You get to make your own\n                \"Sections\" with a variable amount of questions and timings (like the 4 sections on the SAT).\n                <strong> Because I don't want to pay for hosting costs, this project is purely front-ended, meaning that\n                    there are no accounts or logins. There is no way to come back to a test when you close the tab.\n                    I have taken precautions against these such events, but don't expect to revisit the same test if you\n                    accidentally close the site.\n                </strong>\n            </Text>\n            <Divider orientation={\"left\"}>Conclusion</Divider>\n            <Text>\n                I hope that you can use this tool effectively and that you will be able to improve your scores using\n                this tool. The full feature list of what this tool offers and doesn't offer is shown below, and\n                I will try to implement more features.\n            </Text>\n            <FeatureList/>\n            <Divider/>\n            <Text>\n                Last thing, this entire project is open sourced and available on GitHub. Check it out there!\n            </Text>\n        </Paragraph>\n\n\n    )\n}\n\nexport default InfoModal;","import React, {useState} from \"react\";\nimport {Result, Button, Modal, Badge, Alert, Typography} from \"antd\";\nimport {FormOutlined, CloseOutlined} from \"@ant-design/icons/lib\";\nimport InfoModal from \"./InfoModal\";\nimport FeatureList from \"./FeatureList\";\nimport \"./Info.css\"\n\nconst {Title} = Typography\n\nconst InfoTitle = () => {\n    return (\n        <Badge.Ribbon text={\"ALPHA\"} style={{marginRight: \"43%\", marginBottom: \"10px\"}} placement={\"end\"} color={\"red\"}>\n            Exam Simulator\n        </Badge.Ribbon>\n    )\n}\n\nconst AlphaAlert = () => {\n    return (\n        <>\n            <br/>\n            <Alert message={<Title level={3}>Alpha Release</Title>}\n                   description={\"Not all functionality shown below is implemented. This is a proof of concept release. Use with caution!\"}\n                   type={\"error\"}\n                   closable\n                   showIcon\n                   style={{textAlign: \"left\"}}\n            />\n        </>\n    )\n}\n\n\nconst Info = ({setView}) => {\n    const [infoModalIsVisible, setInfoModalIsVisible] = useState(false);\n\n    return (\n        <>\n            <Result\n                icon={<FormOutlined/>}\n                title={<InfoTitle/>}\n                subTitle=\"An easy way for you to take a timed multiple choice exam.\"\n                extra={[\n                    <Button type={\"dashed\"} onClick={() => setInfoModalIsVisible(true)}>Learn More</Button>,\n                    <Button type={\"primary\"} onClick={() => setView(\"setup\")}>Get Started</Button>,\n                    <br/>,\n                    <AlphaAlert/>\n                ]}\n            >\n                <Modal title={\"Learning More...\"}\n                       centered={true}\n                       visible={infoModalIsVisible}\n                       onOk={() => setInfoModalIsVisible(false)}\n                       onCancel={() => setInfoModalIsVisible(false)}\n                       okText={\"Sounds good!\"}\n                       cancelText={\"Ok...\"}\n                >\n                    <InfoModal/>\n                </Modal>\n                <div>\n                    <FeatureList/>\n                </div>\n            </Result>\n        </>\n    )\n}\n\nexport default Info;","import React from \"react\";\nimport {Tooltip, Typography, Divider} from \"antd\";\n\nconst {Paragraph, Text} = Typography;\nconst SetupModal = () => {\n    return (\n        <div>\n            <Paragraph>\n                <strong>DO NOT EXIT THIS WEBSITE WHEN YOU TAKE YOUR TEST!</strong>\n                <br/>\n                <Text>\n                    This includes:\n                    <ul>\n                        <li>Closing the tab</li>\n                        <li>Closing your browser</li>\n                        <li>Refreshing the page</li>\n                        <li>Clicking the \"back\" button</li>\n                        <li>Anything else that involves closing this page!</li>\n                    </ul>\n                </Text>\n                <strong>DOING SO MAY RESULT IN YOUR TEST NOT GETTING SAVED CORRECTLY!</strong>\n            </Paragraph>\n            <Divider orientation={\"center\"}>Why shouldn't I?</Divider>\n            <Paragraph ellipsis={{rows: 2, expandable: true, symbol: \"more\"}}>\n                <Text>\n                    Exam Simulator is completely built on the front end. This design choice has some drawbacks but some\n                    benefits as well.\n                </Text>\n                <Divider orientation={\"left\"}>What is the \"front end\"?</Divider>\n                <Text>\n                    You're very familiar with the \"front end\". A front end is essentially what you see.\n                    For example, the front end of YouTube is the site where you can see all the videos to your\n                    hearts content. All the things that you see when you go to www.youtube.com is the front end. In\n                    a nutshell, the front end is just a pretty face to a server, or the back end.\n                </Text>\n                <Divider orientation={\"left\"}>What's the difference between the front and back end?</Divider>\n                <Text>\n                    There are many differences. It's like saying what's the difference between a diamond ring and the\n                    diamond industry? The front end is like the diamond ring, its the finished product that the user (you)\n                    will see. What goes behind it in the diamond industry you likely won't see at all. Same situation here.\n                    The front end is what you see and interact with but the backend is what you don't see. The backend\n                    does all the heavy lifting, and saves important information like usernames and passwords.\n                </Text>\n                <Divider orientation={\"left\"}>Why did you make this front end only?</Divider>\n                <Text>\n                    This choice of making the Exam Simulator project purely front end is so that I won't have to pay\n                    for deployment costs. This project is hosted on GitHub pages, which is free, but difficult to\n                    implement a backend in, so I omitted it.\n                </Text>\n            </Paragraph>\n        </div>\n\n\n    )\n}\n\nexport default SetupModal;","import React, {useState} from \"react\";\nimport {Form, Space, Button, Input, Modal} from \"antd\";\nimport {MinusCircleOutlined, PlusOutlined, RightOutlined} from \"@ant-design/icons/lib\";\nimport {useSessionStorageState} from \"@umijs/hooks\";\nimport SetupModal from \"./SetupModal\";\n\nconst SetupForm = ({setView}) => {\n    const [numSections, setNumSections] = useState(0);\n    const [sections, setSections] = useSessionStorageState(\"sectionData\", null);\n    const [timeError, setTimeError] = useState({});\n    const [questionError, setQuestionError] = useState({});\n    const [confirmationModalVisible, setConfirmationModalVisible] = useState(false);\n\n    const handleModalOk = () =>{\n        // setConfirmationModalVisible(false);\n        setInterval(() => setView('exam'), 100)\n    }\n\n    const onFinish = values => {\n        console.log('Received values of form:', values);\n        setSections(values);\n    };\n\n    const validateTime = time => {\n        if (time < 1) return {\n            validateStatus: 'error',\n            errorMsg: \"Choose a time greater than 1 minute!\"\n        }\n        // else if (time > 240) return {\n        //     validateStatus: \"warning\",\n        //     errorMsg: \"If one section of your test is greater than 4 hours, you should really consider if its worth it.\"\n        // }\n    }\n\n    const validateQuestions = questions => {\n        if (questions < 1) return {\n            validateStatus: \"error\",\n            errorMsg: \"Choose greater than 1 question!\"\n        }\n    }\n\n    const onQuestionChange = num => {\n        setQuestionError({...validateQuestions(num.target.value), num})\n    }\n\n    const onTimeChange = num => {\n        setTimeError({...validateTime(num.target.value), num})\n    }\n\n    return (\n        <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\n            <Form.List name=\"sections\">\n                {(fields, {add, remove}) => {\n                    return (\n                        <div>\n                                {fields.map(field => (\n                                    <Space key={`section-${field.key}`}\n                                           align=\"start\"\n                                           style={{width:\"100%\"}}\n                                    >\n                                        <h2>{`Section ${field.key + 1}`}:</h2>\n                                        <Form.Item\n                                            {...field}\n                                            name={[field.name, 'num_questions']}\n                                            fieldKey={[field.fieldKey, 'num_questions']}\n                                            rules={[{required: true, message: 'Missing number of questions.'}]}\n                                            validateStatus={questionError.validateStatus}\n                                            help={questionError.errorMsg}\n                                        >\n                                            <Input addonBefore={\"Number of Questions\"} type={\"number\"} onChange={onQuestionChange}/>\n                                        </Form.Item>\n\n                                        <Form.Item\n                                            {...field}\n                                            name={[field.name, 'time']}\n                                            fieldKey={[field.fieldKey, 'time']}\n                                            rules={[{required: true, message: 'Missing time for this section.'}]}\n                                            validateStatus={timeError.validateStatus}\n                                            help={timeError.errorMsg}\n                                        >\n                                            <Input addonBefore={\"Time\"} type={\"number\"} addonAfter={\"minutes\"} onChange={onTimeChange}/>\n                                        </Form.Item>\n\n                                        <MinusCircleOutlined\n                                            onClick={() => {\n                                                setNumSections(numSections - 1);\n                                                remove(field.name);\n                                            }}\n                                            style={{marginTop: \"6px\", fontSize: \"20px\", color: \"red\"}}\n                                        />\n                                    </Space>\n                                ))}\n                            <Form.Item>\n                                <Button\n                                    type=\"dashed\"\n                                    onClick={() => {\n                                        setNumSections(numSections + 1);\n                                        add();\n                                    }}\n                                    block\n                                >\n                                    <PlusOutlined/> Add Section\n                                </Button>\n                            </Form.Item>\n                        </div>\n                    );\n                }}\n            </Form.List>\n            <Modal title={\"One last thing...\"}\n                   centered={true}\n                   visible={confirmationModalVisible}\n                   onOk={handleModalOk}\n                   onCancel={() => setConfirmationModalVisible(false)}\n                   okText={\"Got it!\"}\n                   cancelText={\"Take me back!\"}\n            >\n                <SetupModal/>\n            </Modal>\n            <Form.Item>\n                <Button type=\"primary\"\n                        htmlType=\"submit\"\n                        disabled={!(numSections >= 1)}\n                        style={{marginLeft: \"44%\"}}\n                        onClick={() => setConfirmationModalVisible(true)}\n                >\n                    Let's get started! <RightOutlined/>\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default SetupForm;","import React from \"react\";\nimport {Spin, Result} from \"antd\";\nimport SetupForm from \"./SetupForm\";\nimport {SettingOutlined} from \"@ant-design/icons/lib\";\n\n\nconst Setup = ({setView}) => {\n    const settingIcon = <SettingOutlined style={{fontSize: 64}} spin />\n    return (\n        <Result icon={<Spin indicator={settingIcon} />}\n                title=\"Setup an Exam\"\n                subTitle=\"It's as easy as adding a section!\"\n        >\n            <SetupForm setView={setView}/>\n        </Result>\n    )\n}\n\nexport default Setup;","import React from \"react\";\nimport {Layout} from \"antd\";\nimport Exam from \"./components/Exam/Exam\";\nimport Info from \"./components/Info/Info\";\nimport \"./App.css\"\nimport Setup from \"./components/Setup/Setup\";\n\nconst {Content} = Layout;\n\nconst View = ({view, setView}) => {\n    return (\n        <Content>\n            {view === \"info\" && <Info setView={setView}/>}\n            {view === \"setup\" && <Setup setView={setView}/>}\n            {view === \"exam\" && <Exam/>}\n        </Content>\n    )\n}\n\nexport default View;","import React, {useState} from 'react';\nimport './App.css';\nimport View from \"./View\"\n\nfunction App() {\n  const [view, setView] = useState(\"info\")\n  return (\n      <View view={view} setView={setView}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}